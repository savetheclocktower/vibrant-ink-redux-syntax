
// Make targeting scopes less tedious. Allows you to write
//
//    .s('entity.name.function', { color: @red; });
//
// instead of
//
//    .syntax--entity.syntax--name.syntax--function { color: red };
//
// As with what's typically seen in Atom/Pulsar syntax themes, these scope
// segments will match in any order. In this example, something scoped
// `entity.function.name` would also be targeted, whether this was intended or
// not.
//
.s(@scope, @ruleset) {
  @plugin "util.js";
  @selector: makeScopeSelector(@scope);

  @{selector} {
    @ruleset();
  }
}


// Allows you to write
//
//    .sx('entity.name.function', { color: @red; });
//
// instead of
//
//    *[class^='syntax--entity syntax--name syntax--function '],
//    *[class='syntax--entity syntax--name syntax--function'] {
//      color: red
//    };
//
// Unlike the above, scope matching is _exact_. Our example will match anything
// scoped `entity.name.function`, including anything that has additional scope
// segments after those three. Will not match `entity.function`, `entity.name`,
// or `entity.function.name`.
// 
.sx(@scope, @ruleset) {
  @plugin "util.js";
  @selector: makeExactScopeSelector(@scope, @ruleset);

  @{selector} {
    @ruleset();
  }
}

.mixin-parameter {
  font-style: italic;
}

.mixin-embedded-line {
  background-color: rgba(255, 255, 255, 0.1);
  border: 1px solid rgba(255, 255, 255, 0.05);
  border-radius: 2px;
  color: @syntax-text-color;
}
