@import 'utilities';
@import 'colors';

// JAVASCRIPT (BABEL) OVERRIDES
.s('source.js.jsx', {

  .s('meta.separator', {
    background-color: inherit;
    color: @syntax-text-color;
  });

  .s('punctuation.accessor', { color: @red; });

  .s('entity.quasi.element', {
    .mixin-embedded-line();

    .s('punctuation.quasi.element', {
      color: @red;
    });
  });

  .s('meta.template-expression', {
    // .mixin-embedded-line();
  });

  .s('punctuation.definition.template-expression', {
    color: @red;
  });

  .s('storage.type.function.arrow', {
    color: @syntax-text-color;
  });

  .s('meta.function.parameters', {
    .s('variable.other.readwrite', {
      .mixin-parameter();
    });
  });

  .s('storage.type.function', {
    color: @orange;
  });

  .s('meta.function.method', {
    .s('entity.name.function', {
      color: @orange;
    });
  });

  .s('punctuation.section.embedded', {
    color: @syntax-text-color;
  });

  .s('meta.tag', {
    // color: @red;
    .s('support', {
      color: @red;
    });
  });

  .s('meta.new.expr', {
    .s('variable.other.readwrite', {
      color: @bluish-white;
    });
  });

  .s('constant.other.object.key', {
    color: @orange;

    .s('string.unquoted', { color: @orange; });
  });

  .s('entity.name.function', { color: @orange; });

  .s('string.quoted.template', {
    background-color: lighten(@black, 10%);
  });

  // Function _calls_ should not be colored orange.
  .s('meta.method-call', {
    .s('string.quoted', {
      .s('entity.name.function', {
        color: @green;
      });
    });

    .s('meta.function.arrow', {
      .s('entity.name.function', {
          color: @orange;
      });
    });

    // The Babel grammar applies `entity.name.function` to both function
    // _definitions_ and function _calls_. Try to isolate the latter and
    // exclude them from styling.
    & > .syntax--entity.syntax--name.syntax--function {
      color: inherit !important;
    }
  });

  .s('variable.other.property', {
    color: @syntax-text-color;
  });

  .s('variable.other.constant', {
    color: @foam-green;
  });

  .s('meta.definition.variable', {
    .s('variable.other.constant', {
      color: @blue;
    });
  });

});
